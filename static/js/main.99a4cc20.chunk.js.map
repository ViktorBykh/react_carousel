{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","setAppState","useState","transformValue","setTransformValue","stepWidth","visibleFrame","totalWidth","length","infiniteImages","imagesToRender","className","htmlFor","type","id","defaultValue","min","max","onChange","event","currentTarget","value","onClick","checked","style","width","height","transitionDuration","transform","gridTemplateColumns","animation","map","image","index","src","alt","disabled","prevTransformValue","newTransformValue","App","state","setState","newState","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99a4cc20.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\nimport { State } from '../types/State';\n\ntype CarouselProps = State & {\n  setAppState: (newState: Partial<State>) => void;\n};\n\nconst Carousel: React.FC<CarouselProps> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n  setAppState,\n}) => {\n  const [transformValue, setTransformValue] = useState(0);\n  const stepWidth = itemWidth * step;\n  const visibleFrame = itemWidth * frameSize;\n  const totalWidth = images.length * itemWidth;\n  const infiniteImages = [...images, ...images, ...images, ...images];\n  const imagesToRender = infinite ? infiniteImages : images;\n\n  const handleNextClick = () => {\n    setTransformValue((prevTransformValue) => {\n      let newTransformValue = prevTransformValue - stepWidth;\n\n      if ((newTransformValue + totalWidth) <= visibleFrame) {\n        newTransformValue = prevTransformValue\n          - (newTransformValue + totalWidth)\n          + (itemWidth * (frameSize - step));\n      }\n\n      return newTransformValue;\n    });\n  };\n\n  const handlePrevClick = () => {\n    setTransformValue((prevTransformValue) => {\n      let newTransformValue = prevTransformValue + stepWidth;\n\n      if (-newTransformValue <= 0) {\n        newTransformValue = prevTransformValue + (-prevTransformValue);\n      }\n\n      return newTransformValue;\n    });\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div className=\"Carousel__properties\">\n        <label className=\"Carousel__property\" htmlFor=\"stepId\">\n          <p className=\"Carousel__property--title\">\n            Step:\n          </p>\n          <input\n            type=\"number\"\n            id=\"stepId\"\n            className=\"Carousel__property--input\"\n            defaultValue={`${step}`}\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            onChange={(event) => {\n              setAppState({ step: +event.currentTarget.value });\n              setTransformValue(0);\n            }}\n          />\n        </label>\n\n        <label className=\"Carousel__property\" htmlFor=\"frameId\">\n          <p className=\"Carousel__property--title\">\n            Frame size:\n          </p>\n          <input\n            type=\"number\"\n            id=\"frameId\"\n            className=\"Carousel__property--input\"\n            defaultValue={`${frameSize}`}\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            onChange={(event) => {\n              setAppState({ frameSize: +event.currentTarget.value });\n              setTransformValue(0);\n            }}\n          />\n        </label>\n\n        <label className=\"Carousel__property\" htmlFor=\"itemId\">\n          <p className=\"Carousel__property--title\">\n            Item width:\n          </p>\n          <input\n            type=\"number\"\n            id=\"itemId\"\n            className=\"Carousel__property--input\"\n            defaultValue={`${itemWidth}`}\n            min=\"100\"\n            max=\"400\"\n            step=\"10\"\n            onChange={(event) => {\n              setAppState({ itemWidth: +event.currentTarget.value });\n              setTransformValue(0);\n            }}\n          />\n        </label>\n\n        <label className=\"Carousel__property\" htmlFor=\"animationId\">\n          <p className=\"Carousel__property--title\">\n            Animation duration:\n          </p>\n          <input\n            type=\"number\"\n            id=\"animationId\"\n            className=\"Carousel__property--input\"\n            defaultValue={`${animationDuration}`}\n            min=\"100\"\n            max=\"5000\"\n            step=\"50\"\n            onChange={(event) => setAppState(\n              { animationDuration: +event.currentTarget.value },\n            )}\n          />\n        </label>\n\n        <label className=\"Carousel__property\" htmlFor=\"infiniteId\">\n          <p className=\"Carousel__property--title\">\n            Infinite:\n          </p>\n          <input\n            id=\"infiniteId\"\n            className=\"Carousel__property--input\"\n            type=\"checkbox\"\n            defaultValue={`${infinite}`}\n            onClick={(event) => setAppState(\n              { infinite: event.currentTarget.checked },\n            )}\n          />\n        </label>\n      </div>\n\n      <div\n        className=\"Carousel__images\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n          height: `${itemWidth}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${itemWidth}px`,\n            height: `${itemWidth}px`,\n            transitionDuration: `${animationDuration}ms`,\n            transform: `translateX(${transformValue}px)`,\n            ...(infinite && {\n              gridTemplateColumns:\n                `repeat(${infiniteImages.length}, 1fr)`,\n              animation:\n                `carousel-movement\n                ${animationDuration * 4}ms\n                ease-in-out\n                infinite\n                alternate\n                forwards`,\n            }),\n          }}\n        >\n          {imagesToRender.map((image, index) => (\n            <li key={image}>\n              <img\n                className=\"Carousel__image\"\n                width={`${itemWidth}`}\n                style={{\n                  width: `${itemWidth}px`,\n                  height: `${itemWidth}px`,\n                }}\n                src={image}\n                alt={`${index + 1}`}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          className=\"Carousel__button\"\n          type=\"button\"\n          disabled={transformValue >= 0}\n          onClick={handlePrevClick}\n        >\n          Prev\n        </button>\n        <button\n          className=\"Carousel__button\"\n          type=\"button\"\n          disabled={infinite || transformValue + totalWidth <= visibleFrame}\n          onClick={handleNextClick}\n          data-cy=\"next\"\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport { State } from './types/State';\n\nconst App: React.FC = () => {\n  const initialImages = [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ];\n\n  const [state, setState] = useState<State>({\n    images: initialImages,\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  });\n\n  const setAppState = (newState: Partial<State>): void => {\n    setState((prevState) => ({ ...prevState, ...newState }));\n  };\n\n  const {\n    images,\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n  } = state;\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\" data-cy=\"title\">\n        {infinite\n          ? 'Carousel with ∞ images'\n          : `Carousel with ${images.length} images`}\n      </h1>\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n        setAppState={setAppState}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}